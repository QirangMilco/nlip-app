// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/nlip_api.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  ApiError dco_decode_api_error(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Clip dco_decode_clip(dynamic raw);

  @protected
  ClipCreator dco_decode_clip_creator(dynamic raw);

  @protected
  ClipResponse dco_decode_clip_response(dynamic raw);

  @protected
  CreateSpaceResponse dco_decode_create_space_response(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<Space> dco_decode_list_space(dynamic raw);

  @protected
  LoginResponse dco_decode_login_response(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  Space dco_decode_space(dynamic raw);

  @protected
  SpacesListResponse dco_decode_spaces_list_response(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  User dco_decode_user(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  ApiError sse_decode_api_error(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Clip sse_decode_clip(SseDeserializer deserializer);

  @protected
  ClipCreator sse_decode_clip_creator(SseDeserializer deserializer);

  @protected
  ClipResponse sse_decode_clip_response(SseDeserializer deserializer);

  @protected
  CreateSpaceResponse sse_decode_create_space_response(
    SseDeserializer deserializer,
  );

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<Space> sse_decode_list_space(SseDeserializer deserializer);

  @protected
  LoginResponse sse_decode_login_response(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  Space sse_decode_space(SseDeserializer deserializer);

  @protected
  SpacesListResponse sse_decode_spaces_list_response(
    SseDeserializer deserializer,
  );

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  User sse_decode_user(SseDeserializer deserializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_api_error(ApiError self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_clip(Clip self, SseSerializer serializer);

  @protected
  void sse_encode_clip_creator(ClipCreator self, SseSerializer serializer);

  @protected
  void sse_encode_clip_response(ClipResponse self, SseSerializer serializer);

  @protected
  void sse_encode_create_space_response(
    CreateSpaceResponse self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_space(List<Space> self, SseSerializer serializer);

  @protected
  void sse_encode_login_response(LoginResponse self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_space(Space self, SseSerializer serializer);

  @protected
  void sse_encode_spaces_list_response(
    SpacesListResponse self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_user(User self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;
}
